# -*- coding: utf-8 -*-
"""17-35499-3 [Assignment-1].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gBZslsgZgEtGNCmcdUbZO8fNKFH393KN

# **Unzip CIFAR-10-images-master.zip**
"""

import zipfile
from google.colab import drive

zip_ref = zipfile.ZipFile("/content/drive/My Drive/Colab Notebooks/CIFAR-10-images-master.zip", 'r')
zip_ref.extractall()
zip_ref.close()
print("Done")

"""## **Manhattan Distance**"""

import os
import cv2
import random
import glob
import numpy as np
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow
from google.colab import files
from matplotlib.pyplot import figure, imshow, axis
dic ={}
sort_orders=[]
print("Neighbours, For K=5: L1")
def manhattan_func(path1,cls):
  random1=cv2.imread(path1)
  #cv2_imshow(random)
  random=cv2.imread(path1,0)

  for (root,dirs,files) in os.walk("./CIFAR-10-images-master/train", topdown=True):
    if((root[25:30])=="train"):
      for i in files:
        path = root+'/'+i
        img = cv2.imread(path,0)
        dic[f'{path}'] = np.sum(np.abs(np.subtract(random,img)),axis=None) 
  sort_orders = sorted(dic.items(), key=lambda x: x[1], reverse=False) 
  nearest=sort_orders[1:6]
  count=0;
  fig = plt.figure(figsize=[8,8])
  fig.subplots_adjust(left=None, bottom =None, right =None, top = None, wspace =.9, hspace =None)
  
  for i in range(len(nearest)+1):
    if (i!=0):
      img = cv2.imread(nearest[i-1][0])
      a=fig.add_subplot(1,6,i+1)
      a.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
      a.text(4,-2,nearest[count][1],bbox=dict(facecolor='blue', alpha=0.2))
      count =count+1
      axis("off")
    f=fig.add_subplot(1,6,1)
    f.imshow(cv2.cvtColor(random1, cv2.COLOR_BGR2RGB))
    f.text(0,-3,cls,)
    axis("off")
    f.text(39,17,"-->")

for (root,dirs,files) in os.walk("./CIFAR-10-images-master/train", topdown=True):
  if((root[31:39])=="airplane"):
    rand1=random.choice(files)
    path1 = root+'/'+rand1
    cls = "Airplane"
    manhattan_func(path1,cls)
  if((root[31:41])=="automobile"):
    rand2=random.choice(files)
    path2 = root+'/'+rand2
    cls = "Automobile"
    manhattan_func(path2,cls)
  if((root[31:35])=="bird"):
    rand3=random.choice(files)
    path3 = root+'/'+rand3
    cls = "bird"
    manhattan_func(path3,cls)
  if((root[31:34])=="cat"):
    rand4=random.choice(files)
    path4 = root+'/'+rand4
    cls = "Cat"
    manhattan_func(path4,cls)
  if((root[31:35])=="deer"):
    rand5=random.choice(files)
    path5 = root+'/'+rand5
    cls = "Deer"
    manhattan_func(path5,cls)
  if((root[31:34])=="dog"):
    rand6=random.choice(files)
    path6 = root+'/'+rand6
    cls = "Dog"
    manhattan_func(path6,cls)
  if((root[31:35])=="frog"):
    rand7=random.choice(files)
    path7 = root+'/'+rand7
    cls = "Frog"
    manhattan_func(path7,cls)
  if((root[31:36])=="horse"):
    rand8=random.choice(files)
    path8 = root+'/'+rand8
    cls = "Horse"
    manhattan_func(path8,cls)
  if((root[31:35])=="ship"):
    rand9 =random.choice(files)
    path9 = root+'/'+rand9
    cls = "Ship"
    manhattan_func(path9,cls)
  if((root[31:36])=="truck"):
    rand10=random.choice(files)
    path10 = root+'/'+rand10
    cls = "Truck"
    manhattan_func(path10,cls)

s = sorted(dic.items(), key=lambda x: x[1], reverse=False) 
L1 = list(s[1:][1])

"""# Euclidean Distance"""

import os
import cv2
import random
import glob
import numpy as np
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow
from google.colab import files
dic ={}

print("Neighbours, For K=5: L2")
def euclidean_func(path1,cls):
  random1=cv2.imread(path1)
  random=cv2.imread(path1,0)

  for (root,dirs,files) in os.walk("./CIFAR-10-images-master/train", topdown=True):
    if((root[25:30])=="train"):
      for i in files:
        path = root+'/'+i
        img = cv2.imread(path,0)
        dic[f'{path}'] = float("{:.4f}".format(np.sqrt(np.sum([(a - b) ** 2 for a, b in zip(img, random)]))))

  sort_orders = sorted(dic.items(), key=lambda x: x[1], reverse=False)
  nearest=sort_orders[1:6]

  fig = plt.figure(figsize=[8,8])
  fig.subplots_adjust(left=None, bottom =None, right =None, top = None, wspace =.9, hspace =None)
  count=0
  for i in range(len(nearest)+1):
    if (i!=0):
      img = cv2.imread(nearest[i-1][0])
      a=fig.add_subplot(1,6,i+1)
      a.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
      a.text(4,-2,nearest[count][1],bbox=dict(facecolor='blue', alpha=0.2))
      count=count+1
      axis("off")
    f=fig.add_subplot(1,6,1)
    f.imshow(cv2.cvtColor(random1, cv2.COLOR_BGR2RGB))
    f.text(0,-3,cls,)
    axis("off")
    f.text(39,17,"-->")

cls = "Airplane"
euclidean_func(path1,cls)
cls = "Automobile"
euclidean_func(path2,cls)
cls = "bird"
euclidean_func(path3,cls)
cls = "Cat"
euclidean_func(path4,cls)
cls = "Deer"
euclidean_func(path5,cls)
cls = "Dog"
euclidean_func(path6,cls)
cls = "Frog"
euclidean_func(path7,cls)
cls = "Horse"
euclidean_func(path8,cls)
cls = "Ship"
euclidean_func(path9,cls)
cls = "Truck"
euclidean_func(path10,cls)


s = sorted(dic.items(), key=lambda x: x[1], reverse=False) 
L2 = list(s[1:][1])

"""# **Cross Validation**"""

Main_dic ={}
dirs = []

for (root,dirss,files) in os.walk("./CIFAR-10-images-master/train", topdown=True):   
  if(len(dirss)!=0):
    dirs = dirss
  if((root[25:30])=="train"):
    for i in files: 
      path = root+'/'+i
      img = cv2.imread(path)
      Main_dic[f'{path}'] = img 

        

print(len(Main_dic))
 

print(dirs)

#listt = [path1,path2,path3,path4,path5,path6,path7,path8,path9,path10]
#print(listt)

total=len(Main_dic)

nfolds =5
row=32
column=32
Images=np.zeros((total,row,column,3))
Paths=np.array([])
Names=np.array([])
#print(Names.shape)
count=0
for key, value in Main_dic.items():
  Images[count][:][:][:]=value
  count=count+1
  Paths=np.append(Paths,key)
  list1dir=list(filter(lambda x: x in key, dirs))
  Names=np.append(Names,list(filter(lambda x: x in key,list1dir))[0])

foldsI = np.split(Images, nfolds)
#print(foldsI)
foldsN = np.split(Names, nfolds)
#print(foldsN)
foldsp =np.split(Paths, nfolds)
#print(foldsp)
#Names=np.append(N_ames,list(filter(lambda x: x in key,listdir))[0])
print(Images.shape)
#print(Paths.shape)
print(Names.shape)

Images = np.reshape(Images, (Images.shape[0], -1))
print(Images.shape)

def class_fun(dir,num):
  for j in dirs:
    if dirs[j]=='frog':
      num = np.append(num,1)
    if dirs[j]=='cat':
      num = np.append(num,2)
    if dirs[j]=='dog':
      num = np.append(num,3)
    if dirs[j]=='automobile':
      num = np.append(num,4)
    if dirs[j]=='truck':
      num = np.append(num,5)
    if dirs[j]=='airplane':
      num = np.append(num,6)
    if dirs[j]=='horse':
      num = np.append(num,7)
    if dirs[j]=='ship':
      num = np.append(num,8)
    if dirs[j]=='deer':
      num = np.append(num,9)
    if dirs[j]=='bird':
      num = np.append(num,10)
    

Ifolds = np.split(Images, nfolds)
Nfolds = np.split(Names, nfolds)
Pfolds = np.split(Paths, nfolds)
num = np.array([])
foldNum=np.split(num, nfolds)
print(foldNum)
 
dic_ac={}
k_val = [1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96,100]
for i in k_val:
  dic_ac[i]=[]

i=1
fold5 = 5
#for i in range(fold5):
 # train_set=np.concatenate((*Ifolds[:i], *Ifolds[i+1:]), axis=0).astype(np.float)
  #val_set=Ifolds[i]
  #Nset=np.concatenate((*Nfolds[:i], *Nfolds[i+1:]), axis=0)
  #Pset=np.concatenate((*Pfolds[:i], *Pfolds[i+1:]), axis=0)
  #Fval_set = foldNum[i]
  #t = val_set.shape[0]
  #total_train=  train_set.shape[0]
  #X=np.sum(val_set**2, axis=1).reshape((t,1))
  #Y=np.sum(val_set**2,axis=1).reshape((1,t))
  #XY=2*np.matmul(val_set,train_set.T)
  #L2=np.sqrt(X+Y-XY).astype(np.float)
#print(L2)


#for i in k_val:
 # N=p(distancesL2,k=i)
  #correctness = (float(np.sum(np.equal(Nset, Fval)))/t)
  #k_val[i].append(correctness)

